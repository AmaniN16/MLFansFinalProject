import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('D:/google download/as/train.csv')

# Check for missing values
print(df.isnull().sum())

# Check the data types
print(df.dtypes)

# Summary statistics
print(df.describe())

# Data visualization
sns.histplot(df['max_torque'])
plt.title('Distribution of Max Torque')
plt.show()

sns.scatterplot(x='max_power', y='gross_weight', data=df)
plt.title('Max Power vs Gross Weight')
plt.show()

sns.boxplot(x='airbags', y='is_claim', data=df)
plt.title('Airbags vs Insurance Claim')
plt.show()

# Correlation analysis
df_numeric = df.select_dtypes(include=['float64', 'int64'])
corr_matrix = df_numeric.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Feature selection
from sklearn.decomposition import PCA
pca = PCA(n_components=5)
pca.fit(df_numeric)
print(pca.explained_variance_ratio_)

# Data preprocessing
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df_numeric)

# Train and test the model
# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df_scaled, df['is_claim'], test_size=0.3, random_state=42)

# Train a logistic regression model
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(X_train, y_train)

# Test the model on the testing set
y_pred = lr.predict(X_test)

# Evaluate the model's performance
from sklearn.metrics import accuracy_score, confusion_matrix
accuracy = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
print('Accuracy:', accuracy)
print('Confusion matrix:', cm)
